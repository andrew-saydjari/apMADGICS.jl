## This script builds the skyCont priors from a bunch of samples generated by sample_sky.jl
# Author - Andrew Saydjari, CfA

import Pkg; using Dates; t0 = now(); t_then = t0;
using InteractiveUtils; versioninfo()
Pkg.activate("../../"); Pkg.instantiate(); Pkg.precompile()
t_now = now(); dt = Dates.canonicalize(Dates.CompoundPeriod(t_now-t_then)); println("Package activation took $dt"); t_then = t_now; flush(stdout)
using BLISBLAS
using Distributed, SlurmClusterManager, Suppressor, DataFrames
addprocs(SlurmManager(),exeflags=["--project=../../"])
t_now = now(); dt = Dates.canonicalize(Dates.CompoundPeriod(t_now-t_then)); println("Worker allocation took $dt"); t_then = t_now; flush(stdout)

@everywhere begin
    using BLISBLAS
    using LinearAlgebra
    BLAS.set_num_threads(1)
    using FITSIO, Serialization, HDF5, LowRankOps, EllipsisNotation, ShiftedArrays
    using Interpolations, SparseArrays, ParallelDataTransfer, AstroTime, Suppressor
    using ThreadPinning

    prior_dir = "/uufs/chpc.utah.edu/common/home/u6039752/scratch1/working/"
    prior_dir0 = "/uufs/chpc.utah.edu/common/home/u6039752/scratch/working/"
    src_dir = "../../"
    include(src_dir*"src/utils.jl")
    include(src_dir*"src/gridSearch.jl")
    include(src_dir*"src/componentAndPosteriors.jl")
    include(src_dir*"src/fileNameHandling.jl")
    include(src_dir*"src/ingest.jl")
    include(src_dir*"src/lowRankPrescription.jl")
    include(src_dir*"src/marginalizeEW.jl")
    include(src_dir*"src/spectraInterpolation.jl")
    include(src_dir*"src/chi2Wrappers.jl")
    include(src_dir*"src/prior_build/prior_utils.jl")
    include(src_dir*"src/prior_build/gspice.jl")
    
    using StatsBase, ProgressMeter
end
t_now = now(); dt = Dates.canonicalize(Dates.CompoundPeriod(t_now-t_then)); println("Worker loading took $dt"); t_then = t_now; flush(stdout)

# Task-Affinity CPU Locking in multinode SlurmContext
slurm_cpu_lock()
println(BLAS.get_config()); flush(stdout)
t_now = now(); dt = Dates.canonicalize(Dates.CompoundPeriod(t_now-t_then)); println("CPU locking took $dt"); t_then = t_now; flush(stdout)

using LibGit2; git_branch, git_commit = initalize_git(src_dir); @passobj 1 workers() git_branch; @passobj 1 workers() git_commit

@everywhere begin
    runlist_range = 295 #1:600 #295, 245, 335, 101

    nsub_bright = 120;
    nsub_faint = 120;

    nsigma_schedule = [20, 8, 6];

    function thresh_bright_faint(adjfibindx)
        if adjfibindx <= 300
            return 2000
        else
            return 645
        end
    end

    # Prior Dictionary
    prior_dict = Dict{String,String}()

    sky_base = prior_dir*"2024_02_21/apMADGICS.jl/src/prior_build/"

    # Location of the samples
    prior_dict["skycont"] = sky_base*"sky_prior_disk/skycont_"
    prior_dict["skyline"] = sky_base*"sky_prior_disk/skyline_"
    prior_dict["skymsk"] = sky_base*"sky_prior_disk/skymsk_"
    prior_dict["skyvar"] = sky_base*"sky_prior_disk/skyvar_"
    prior_dict["chebmsk_exp"] = sky_base*"sky_prior_disk/chebmsk_exp_"

    prior_dict["skycont_tellDiv"] = sky_base*"sky_prior_disk/skycont_tellDiv_"
    prior_dict["skyline_tellDiv"] = sky_base*"sky_prior_disk/skyline_tellDiv_"
    prior_dict["skymsk_tellDiv"] = sky_base*"sky_prior_disk/skymsk_tellDiv_"
    prior_dict["skyvar_tellDiv"] = sky_base*"sky_prior_disk/skyvar_tellDiv_"
end

@everywhere begin
    wavetarg = 10 .^range((4.179-125*6.0e-6),step=6.0e-6,length=8575+125) #first argument is start, revert fix to enable 1.6 compat
    minw, maxw = extrema(wavetarg)
end

@everywhere begin
    function build_skyLines(adjfibindx; tellDiv=false)
        fnameBright = if tellDiv
            "sky_priors/APOGEE_skyline_bright_tellDiv_svd_"*string(nsub_bright)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        else
            "sky_priors/APOGEE_skyline_bright_svd_"*string(nsub_bright)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        end

        fnameBrightGSPICE = if tellDiv
            "sky_priors/APOGEE_skyline_bright_tellDiv_GSPICE_svd_"*string(nsub_bright)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        else
            "sky_priors/APOGEE_skyline_bright_GSPICE_svd_"*string(nsub_bright)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        end

        fnameFaint = if tellDiv
            "sky_priors/APOGEE_skyline_faint_tellDiv_svd_"*string(nsub_faint)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        else
            "sky_priors/APOGEE_skyline_faint_svd_"*string(nsub_faint)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        end

        fnameFaintGSPICE = if tellDiv
            "sky_priors/APOGEE_skyline_faint_tellDiv_GSPICE_svd_"*string(nsub_bright)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        else
            "sky_priors/APOGEE_skyline_faint_GSPICE_svd_"*string(nsub_bright)*"_f"*lpad(adjfibindx,3,"0")*".h5"
        end

        if !(isfile(fnameBright) & isfile(fnameBrightGSPICE) & isfile(fnameFaint) & isfile(fnameFaintGSPICE))
            savename = if tellDiv
                prior_dict["skyline_tellDiv"]*lpad(adjfibindx,3,"0")*".jdat"
            else
                prior_dict["skyline"]*lpad(adjfibindx,3,"0")*".jdat"
            end
            skyline = deserialize(savename)

            savename = if tellDiv
                prior_dict["skymsk_tellDiv"]*lpad(adjfibindx,3,"0")*".jdat"
            else
                prior_dict["skymsk"]*lpad(adjfibindx,3,"0")*".jdat"
            end
            skymsk = deserialize(savename);

            savename = if tellDiv 
                prior_dict["skyvar_tellDiv"]*lpad(adjfibindx,3,"0")*".jdat"
            else
                prior_dict["skyvar"]*lpad(adjfibindx,3,"0")*".jdat"
            end
            skyvar = deserialize(savename);

            savename = prior_dict["chebmsk_exp"]*lpad(adjfibindx,3,"0")*".jdat"
            chebmsk_exp = deserialize(savename);

            # Sep Bright/Faint
            specsum = dropdims(sum(skyline,dims=1),dims=1)
            obscnt = dropdims(sum(skymsk,dims=2),dims=2);
            submsk = (obscnt.>=10) .& chebmsk_exp;
            Vred = skyline[submsk,specsum.>0];
            skymsked = skymsk[submsk,specsum.>0]
            Vred .*= skymsked;

            median_sky = dropdims(nanzeromedian(Vred,2),dims=2);

            submsk_bright = copy(submsk)
            submsk_faint = copy(submsk)
            mskflux = .!expand_msk(median_sky .< thresh_bright_faint(adjfibindx),rad=4)
            mskflux_big = zeros(Bool,length(submsk))
            mskflux_big[submsk].=mskflux
            
            submsk_bright[mskflux_big].&= true
            submsk_bright[.!mskflux_big].&= false
            
            submsk_faint[mskflux_big].&= false
            submsk_faint[.!mskflux_big].&= true;

            # Bright
            if !(isfile(fnameBright) & isfile(fnameBrightGSPICE))
                specsum = dropdims(sum(skyline,dims=1),dims=1)
                obscnt = dropdims(sum(skymsk,dims=2),dims=2);
                submsk = (obscnt.>=10) .& chebmsk_exp .& submsk_bright;
                Vred = skyline[submsk,specsum.>0];
                skymsked = skymsk[submsk,specsum.>0];
                Vred .*= skymsked

                if !isfile(fnameBright)
                    norm_weights = skymsked*skymsked';
                    Csky = Vred*Vred'
                    Csky./=(norm_weights .+ (norm_weights.==0));

                    SF = svd(Csky);
                    EVEC = zeros(length(wavetarg),size(SF.U,2))
                    EVEC[submsk,:].=SF.U;

                    h5write(fnameBright,"Vmat",EVEC[:,1:nsub_bright]*Diagonal(sqrt.(SF.S[1:nsub_bright])))
                    h5write(fnameBright,"λv",SF.S[1:nsub_bright])
                    h5write(fnameBright,"submsk",convert.(Int,submsk)) # different for bright/faint skylines
                end
                
                # Bright GSPICE
                if !isfile(fnameBrightGSPICE)
                    flux = collect(Vred');
                    fluxvar = collect(skyvar[submsk,specsum.>0]');
                    ivar = 1 ./(fluxvar);
                    mask = collect((skymsked.==0)'); #invert to 0/1 encoding of GSPICE

                    out = gspice.gspice_covar_iter_mask(flux, ivar, mask; nsigma=nsigma_schedule, maxbadpix=650, usamp_factor=2, reg_eps = 1e-3);

                    Vred_1 = copy(Vred)
                    skymsked_1 = convert.(Float64,.!out[2]')
                    Vred_1 .*= skymsked_1;
                    norm_weights_1 = skymsked_1*skymsked_1';
                    Csky = Vred_1*Vred_1'
                    Csky./=(norm_weights_1 .+ (norm_weights_1.==0));

                    SF = svd(Csky);
                    EVEC = zeros(length(wavetarg),size(SF.U,2))
                    EVEC[submsk,:].=SF.U;

                    h5write(fnameBrightGSPICE,"Vmat",EVEC[:,1:nsub_bright]*Diagonal(sqrt.(SF.S[1:nsub_bright])))
                    h5write(fnameBrightGSPICE,"λv",SF.S[1:nsub_bright])
                    h5write(fnameBrightGSPICE,"submsk",convert.(Int,submsk)) # different for bright/faint skylines
                end
            end

            # Faint
            if !(isfile(fnameFaint) & isfile(fnameFaintGSPICE))
                specsum = dropdims(sum(skyline,dims=1),dims=1)
                obscnt = dropdims(sum(skymsk,dims=2),dims=2);
                submsk = (obscnt.>=10) .& chebmsk_exp .& submsk_faint;
                Vred = skyline[submsk,specsum.>0];
                skymsked = skymsk[submsk,specsum.>0];
                Vred .*= skymsked
                if !isfile(fnameFaint)
                    norm_weights = skymsked*skymsked';
                    Csky = Vred*Vred'
                    Csky./=(norm_weights .+ (norm_weights.==0));

                    SF = svd(Csky);
                    EVEC = zeros(length(wavetarg),size(SF.U,2))
                    EVEC[submsk,:].=SF.U;

                    h5write(fnameFaint,"Vmat",EVEC[:,1:nsub_faint]*Diagonal(sqrt.(SF.S[1:nsub_faint])))
                    h5write(fnameFaint,"λv",SF.S[1:nsub_faint])
                    h5write(fnameFaint,"submsk",convert.(Int,submsk)) # different for bright/faint skylines
                end

                # Faint GSPICE
                if !isfile(fnameFaintGSPICE)
                    flux = collect(Vred');
                    fluxvar = collect(skyvar[submsk,specsum.>0]');
                    ivar = 1 ./(fluxvar);
                    mask = collect((skymsked.==0)'); #invert to 0/1 encoding of GSPICE

                    out = gspice.gspice_covar_iter_mask(flux, ivar, mask; nsigma=nsigma_schedule, maxbadpix=650, usamp_factor=2, reg_eps = 1e-3);

                    Vred_1 = copy(Vred)
                    skymsked_1 = convert.(Float64,.!out[2]')
                    Vred_1 .*= skymsked_1;
                    norm_weights_1 = skymsked_1*skymsked_1';
                    Csky = Vred_1*Vred_1'
                    Csky./=(norm_weights_1 .+ (norm_weights_1.==0));

                    SF = svd(Csky);
                    EVEC = zeros(length(wavetarg),size(SF.U,2))
                    EVEC[submsk,:].=SF.U;

                    h5write(fnameFaintGSPICE,"Vmat",EVEC[:,1:nsub_bright]*Diagonal(sqrt.(SF.S[1:nsub_bright])))
                    h5write(fnameFaintGSPICE,"λv",SF.S[1:nsub_bright])
                    h5write(fnameFaintGSPICE,"submsk",convert.(Int,submsk)) # different for bright/faint skylines
                end
            end
        end
    end

    function build_skyLines_wrapper(adjfibindx)
        # Usual version for building sky prior
        build_skyLines(adjfibindx)
        # Tell-free sky version for building Tfun/starCont prior
        build_skyLines(adjfibindx, tellDiv=true)
    end
end

# it spends most of its time on a simple matmul ????
build_skyLines_wrapper(runlist_range)
# # @showprogress pmap(build_skyLines_wrapper,1:600) # 13ish hours on 4 np nodes